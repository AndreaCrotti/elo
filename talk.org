#+AUTHOR: Andrea Crotti (@andreacrotti)
#+TITLE: An ELO platform with Clojure and Re-Frame
#+OPTIONS: num:nil toc:nil ^:nil tex:t reveal_progress:t reveal_control:t reveal_overview:t
#+REVEAL_TRANS: none
#+REVEAL_SPEED: fast
#+REVEAL_HLEVEL: 1
#+TOC: listings

* Introduction

#+BEGIN_NOTES

In this talk I will talk about a project I've been working on in my
free time, which is an platform to manage leagues with your
colleagues.

It uses the ELO algorithm to compute the rankings, and it can be
potentially used for any game, even if we only use it for Fifa at the
moment internally.

To build this platform I'm using Clojure in the backend and
Clojurescript, with Re-frame in the frontend, and I'll try to give an
idea about why it's so great and fun.

#+END_NOTES

* Elo

# TODO: do we need to read the full definition out loud?

#+BEGIN_NOTES

Before going into the Clojure details, I'll just introduce who the ELO algorithm works.
The Elo rating system is a method for calculating the relative skill level of players in zero-sum games such as Chess.
To clarify a *zero-sum* game is simply a game where one player wins and another player loses, or they draw.
Some interesting are social traps, like the prisoner dilemma or other similar things.

So as you can imagine this rating system can be applied to any office
game like Pool, Table Tennis, Fifa, or any other game you can imagine really.

#+END_NOTES

*The Elo rating system is a method for calculating the relative skill levels of players in zero-sum games such as chess.*

** Elo scores example

#+BEGIN_NOTES

You can compute the new rankings of two players with simply the current rankings and the result of the game.
Everyone starts from 1500, and overall that will always be the average of all the scores in the league.

So suppose for example

#+END_NOTES

A: 1500
B: 1500

$E\_A =  \frac{1}{1 + 10 ^ \frac{RB - RA}{400}} = \frac{1}{1 + 10 ^ \frac{0}{400}}$
$E\_A = \frac{1}{2} = 0.5$

*A vs B (3-0)*

$R\_A = 1500 + (K * (1 - E\_A)) = 1500 + (32 * (1 - 0.5)) = 1516$
$R\_B = 1500 + (K * (1 - E\_B)) = 1500 + (32 * (0 - 0.5)) = 1484$

** Second example

A: 1350
B: 1650


$E\_A =  \frac{1}{1 + 10 ^ \frac{RB - RA}{400}} = \frac{1}{1 + 10 ^ \frac{300}{400}}$
$E\_A = \frac{1}{6.62} = 0.15$
$E\_B = 1 - E\_A = 0.85$

*Big upset, A winning against B*

$R\_A = 1500 + (K * (1 - E\_A)) = 1500 + (32 * (1 - 0.15))$
$R\_A = 1527$

$R\_B = 1500 + (K * (1 - E\_B)) = 1500 + (32 * (1 - 0.85))$

*Draw between A and B*

$R\_A = 1500 + (K * (1 - E\_A)) = 1500 + (32 * (0.5 - 0.15))$
$R\_A = 1511$

** Minor demo time

# TODO: would it make sense to move it before the mathematical
# formulas explaining how it works?

#+BEGIN_NOTES

Here we can simply go to a brand new league, create two players, and
record some games, so see how their scores update.

#+END_NOTES

* Clojurescript

#+BEGIN_NOTES

Given you are all part of a Clojure group I probably don't have to go
much into detail in Clojure.

Clojure is a great language as we all know, but maybe the greatest
advantage for me at the moment compared to most other languages is
that we also have Clojurescript, which means you can truly create a
web-app using *only* Clojure full-stack, using the JVM in the backend
and compiling Javascript for the frontend.

Clojurescript is maintained by the same guys maintaining Clojure so
it's not just a random spin-off diverging from the official language,
but actually given how the release cycle works Clojurescript all the
updates before Clojure itself does.

#+END_NOTES

* Re-frame



* One language to rule them all

** Clojure -> Javascript

#+BEGIN_SRC clojure

#+END_SRC

** Clojure -> HTML

#+BEGIN_SRC clojure
  (defn body
    []
    [:html
     [:body
      [:div {:id "app"}]
      [:script {:src "/js/compiled/app.js"}]
      [:script "elo.core.init();"]]])
#+END_SRC

** Clojure -> CSS

#+BEGIN_SRC clojure
  (def leagues-page
    [[:.league__content {:width "80%"
                         :padding-top "10px"
                         :padding-left "10px"}]
     [:.language_pick {:font-size "24px"
                       :text-align "center"}]])
#+END_SRC

#+BEGIN_SRC css
  .league__content {
    width: 80%;
    padding-top: 10px;
    padding-left: 10px;
  }

  .language_pick {
    font-size: 24px;
    text-align: center;
  }
#+END_SRC

* Re-frame

** FRP

**


* Putting it all together

* Demo Time
