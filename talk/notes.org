#+AUTHOR: Andrea Crotti (@andreacrotti)
#+TITLE: Build an ELO platform with Clojure and Re-Frame
#+OPTIONS: num:nil toc:nil ^:nil tex:t reveal_progress:t reveal_control:t reveal_overview:t
#+REVEAL_TRANS: none
#+REVEAL_SPEED: fast
#+REVEAL_HLEVEL: 1
#+REVEAL_THEME: white
#+TOC: listings

* Play

#+BEGIN_NOTES

Playing with your colleagues is a great way to have fun at work, bond
on a more personal level with your collegues, and relax your brain for
a moment from that nasty problem you are debugging.

However of course playing is even more fun if you make it a proper
competition, with a proper league and such.

I've had internal leagues for table tennis and similar office sports
in various companies, where the tracking tool was sometimes just an
extremely complicated spreadsheet, and since there wasn't nothing here
at funding circle currently I just decided to build a new tool.

This talk is about the journey of building such platform using Clojure
full stack, but first let's explain what ELO means, and why I chose
that.

#+END_NOTES

#+BEGIN_QUOTE
All work and no play makes
Jack a dull boy
#+END_QUOTE

[[./competitivekid.jpg]]

* Elo

[[./arpad_elo.jpeg]]

#+BEGIN_NOTES

The Elo rating system is a method for calculating the relative skill
level of players in zero-sum games such as Chess.

To clarify a *zero-sum* game is simply a game where one player wins
and another player loses, or they draw, which is really almost every
game you can play in the office

In practice the rating system just works by to first assigning initial
rankings to players and then for each game compute the new rankings of
the two players.

The biggest the difference in rankings the bigger will be the changes
to the rankings.

#+END_NOTES

*The Elo rating system is a method for calculating the relative skill levels of players in zero-sum games such as chess.*

** Demo time

#+BEGIN_NOTES

Let's see in practice how this works with a very simple demo.

#+END_NOTES

[[./rocket_man.gif]]

** Elo example

#+BEGIN_NOTES

You can compute the new rankings of two players with simply the current rankings and the result of the game.
Everyone starts from 1500, and overall that will always be the average of all the scores in the league.

#+END_NOTES

*A: 1500, B: 1500*

$E\_A =  \frac{1}{1 + 10 ^ \frac{RB - RA}{400}} = \frac{1}{1 + 10 ^ \frac{0}{400}}$
$E\_A = \frac{1}{2} = 0.5$
$E\_B = \frac{1}{2} = 0.5$

*A vs B (3-0):*

$R\_A = 1500 + (K * (1 - E\_A)) = 1500 + (32 * (1 - 0.5)) = 1516$
$R\_B = 1500 + (K * (1 - E\_B)) = 1500 + (32 * (0 - 0.5)) = 1484$

*A = 1516, B = 1484*

# TODO: actually fix this example if you want to show it

# ** Elo example (2)

# A: 1350
# B: 1650

# $E\_A =  \frac{1}{1 + 10 ^ \frac{RB - RA}{400}} = \frac{1}{1 + 10 ^ \frac{300}{400}}$
# $E\_A = \frac{1}{6.62} = 0.15$
# $E\_B = 1 - E\_A = 0.85$

# *Big upset, A winning against B*

# $R\_A = 1350 + (K * (1 - E\_A)) = 1350 + (32 * (1 - 0.15))$
# $R\_A = 1377$

# $R\_B = 1650 + (K * (1 - E\_B)) = 1650 + (32 * (1 - 0.85))$

# *Draw between A and B*

# $R\_A = 1500 + (K * (1 - E\_A)) = 1500 + (32 * (0.5 - 0.15))$
# $R\_A = 1511$

** Elo implementation (1)

$E\_A =  \frac{1}{1 + 10 ^ \frac{RB - RA}{400}}$

$R\_A = R\_A + (K * (1 - E\_A))$

#+BEGIN_SRC clojure
(defn expected
  [diff]
  (/ 1.0 (inc (Math/pow 10 (/ diff 400)))))

#+END_SRC

#+BEGIN_SRC clojure
(defn new-rating
  [old expected score]
  (+ old (* k (- score expected))))

#+END_SRC

** Elo implementation (2)

#+BEGIN_SRC clojure

(defn new-rankings
  [rankings [p1 p2 score]]

  (let [ra (get rankings p1)
        rb (get rankings p2)]

    (assoc rankings
           p1 (new-rating ra
                          (expected (- rb ra))
                          score)

           p2 (new-rating rb
                          (expected (- ra rb))
                          (invert-score score)))))

#+END_SRC

#+BEGIN_SRC clojure
  ;; P1 wins against same level opponent:
  (new-rankings {:p1 1500 :p2 1500} [:p1 :p2 0])
  ;; => {:p1 1484.0, :p2 1516.0}
#+END_SRC

#+BEGIN_SRC clojure
  ;; P1 wins against much stronger opponent:
  (new-rankings {:p1 1300 :p2 1700} [:p1 :p2 1])
  ;; => {:p1 1329.090909090909, :p2 1670.909090909091}
#+END_SRC

* Re-frame

#+BEGIN_NOTES

Another very important piece of the puzzle is Re-Frame, which is a
great little framework to create SPAs doing Functional Reactive
Programming.

In this stack we have `React` at the bottom, which is the lower level
library. On top of that there is a Clojurescript wrapper called
`Reagent`, which hides all the javascript interop and give you a nice
Clojure interface to React.

Reagent allows you to define components using Hiccup syntax

#+END_NOTES

#+BEGIN_SRC clojure
  (defn some-component []
    [:div
     [:h3 "I am a component!"]
     [:p.someclass
      "I have " [:strong "bold"]
      [:span {:style {:color "red"}} " and red"]
      " text."]])
#+END_SRC

#+BEGIN_SRC clojure
  ;; render everything
  (defn mountit []
    (r/render [childcaller]
              (.-body js/document)))
#+END_SRC


React → (Clojurescript) → Reagent → Re-Frame

** Concepts

- single *app db*
- subscriptions: *reg-sub*
- event handler: *reg-event-db*
- effect handler: *reg-event-fx*

** Form

[[./form.png]]

** DB

#+BEGIN_SRC clojure

(def default-db
  {:games []
   :players []
   :dead-players #{}
   :game {}
   :error nil
   :up-to-games nil
   :league {}
   :league_id nil})

(def default-game
  {:p1 ""
   :p2 ""
   :p1_points ""
   :p2_points ""
   :p1_using ""
   :p2_using ""
   :played_at (js/moment)})

#+END_SRC

** Subscription

#+BEGIN_SRC clojure
  (rf/reg-sub ::game
              (fn [db _]
                [::game db]))

  (rf/reg-event-db ::p1_using
                   (fn [db [_ val]]
                     (assoc-in db [::game :p1_using] val)))
#+END_SRC

#+BEGIN_SRC clojure
  (let [game @(rf/subscribe [::handlers/game])]
    [:input.form-control
     {:type "text"
      :placeholder "Name"
      :value (:p1_using @game)
      :on-change (utils/set-val ::handlers/p1_using)}])
#+END_SRC

** API Call

#+BEGIN_SRC clojure
  (rf/reg-event-db
   ::on-success
   (fn [db [_ games]]
     (assoc db ::games games)))

  (rf/reg-event-fx
   ::load-games
   (fn [{:keys [db]} _]
     {:db db
      :http-xhrio {:method :get
                   :uri "/api/games"
                   :params {:league_id (get-league-id db)}
                   :format (ajax/json-request-format)
                   :response-format (ajax/json-response-format {:keywords? true})
                   :on-success [::on-success]
                   :on-failure [:failed]}}))
#+END_SRC

* Demo Time

[[./rocket.gif]]

#+BEGIN_NOTES

We are going to do a quick demo now, to show what it means to do full
stack development with Clojure and re-frame.  So we'll add a simple
new feature to our platform, simply showing some extra stats in the
player page.

To do this we'll need:

- one extra reagent component
- a re-frame subscription
- more business logic to compute the desired stats
- a bit of CSS to make it look pretty

#+END_NOTES

* Conclusions

*Frontend development is fun again*

- 1 language to rule them all
- FRP rocks
- auto reloading everything

* Tasks
** TODO add something about CLJC files and how easy is to share business logic across frontend and backend?
** TODO add the sample ELO implementation code
** TODO add some graph explaining how re-frame works?
** TODO think about what can be done in a small demo
** TODO add some motivation to work on this specific project
** TODO improve explanation of Elo
** TODO improve conclusions
** TODO fix all the code
** TODO show some events handling in 10x?
** TODO improve pictures/gifs
** TODO add link to the project and the twitter handle more clearly

* Ideas for the demo

- change parameters of the Elo algorithm
- change slightly the Elo algorithm to take into consideration the goal difference
- add the rankings difference into the table of results

* References
- http://doctoranddad.com/kid-becoming-competitive/
- https://purelyfunctional.tv/article/react-vs-re-frame/
