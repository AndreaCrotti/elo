#+AUTHOR: Andrea Crotti (@andreacrotti)
#+TITLE: Build an ELO platform with Clojure and Re-Frame
#+OPTIONS: num:nil toc:nil ^:nil tex:t reveal_progress:t reveal_control:t reveal_overview:t
#+REVEAL_TRANS: none
#+REVEAL_SPEED: fast
#+REVEAL_HLEVEL: 1
#+TOC: listings

* Who Am I

#+BEGIN_NOTES
Just to give a very brief introduction about myself, I work here at
Funding Circle, I have a moustache just because it's Movember and I've
been for most of my career a backend Developer.

Or well to be precise in a few jobs I was doing some frontend work as
well, but I would have never even considered doing Angular or Knockout
JS or CSS for fun!

In the last year instead I worked on 2 medium personal projects using
Clojure and Clojurescript and I actually really enjoy it.
Today I'm going to talk about one of the projects,

So today I'm going to talk about one of the projects I've been working
on, a platform to create leagues with your friends and keep track of
rankings.

#+END_NOTES

- senior software developer at Funding Circle
- API & backends for a long time
- saw the light with Clojure & Clojurescript

* Play

#+BEGIN_NOTES

Every respectable start-up out there has a few games, they are after
all a great way to bond and to take your mind off an annoying bug you
can't seem to solve.

However of course playing is even more fun if you make it competitive,
so we need a way to keep track of the scores and a way to rank the
players.

I've had internal leagues for table tennis and similar office sports
in various companies, where the tracking tool was sometimes just an
extremely complicated spreadsheet, and since there wasn't nothing here
at funding circle currently I just decided to build a new tool.

This talk is about the journey of building such platform using Clojure
full stack, but first let's explain what ELO means, and why I chose
that.

#+END_NOTES

#+BEGIN_QUOTE
All work and no play makes
Jack a dull boy
#+END_QUOTE

[[./kittens.jpg]]

* Elo

[[./chess.jpg]]

** Elo rating system
#+BEGIN_NOTES

The Elo rating system is a method for calculating the relative skill
level of players in zero-sum games such as Chess.

To clarify a *zero-sum* game is simply a game where one player wins
and another player loses, or they draw, which is really almost every
game you can play in the office

The biggest the difference in rankings the bigger will be the changes
to the rankings.

#+END_NOTES

- method for calculating the *relative* skill levels of players
- can be applied to *any* zero sum game (chess / tennis / table tennis...)
- new rankings *only* depends on current rankings and result
- points won or lost depend on the *ranking difference* between two players
- average of all the points is constant

** Demo time

#+BEGIN_NOTES

Let's see in practice how this works with a very simple demo.

#+END_NOTES

** Elo example

#+BEGIN_NOTES

You can compute the new rankings of two players with simply the current rankings and the result of the game.
Everyone starts from 1500, and overall that will always be the average of all the scores in the league.

#+END_NOTES

*A: 1500, B: 1500*

$E\_A =  \frac{1}{1 + 10 ^ \frac{RB - RA}{400}} = \frac{1}{1 + 10 ^ \frac{0}{400}}$
$E\_A = \frac{1}{2} = 0.5$
$E\_B = \frac{1}{2} = 0.5$

*A vs B (3-0):*

$R\_A = 1500 + (K * (1 - E\_A)) = 1500 + (32 * (1 - 0.5)) = 1516$
$R\_B = 1500 + (K * (1 - E\_B)) = 1500 + (32 * (0 - 0.5)) = 1484$

*A = 1516, B = 1484*

** Elo implementation (1)

$E\_A =  \frac{1}{1 + 10 ^ \frac{RB - RA}{400}}$

$R\_A = R\_A + (K * (1 - E\_A))$

#+BEGIN_SRC clojure :tangle yes
(defn expected
  [diff]
  (/ 1.0 (inc (Math/pow 10 (/ diff 400)))))

#+END_SRC

#+BEGIN_SRC clojure :tangle yes
(defn new-rating
  [old expected score]
  (+ old (* k (- score expected))))

#+END_SRC

** Elo implementation (2)

#+BEGIN_SRC clojure :tangle yes

(defn new-rankings
  [rankings [p1 p2 score]]

  (let [ra (get rankings p1)
        rb (get rankings p2)]

    (assoc rankings
           p1 (new-rating ra
                          (expected (- rb ra))
                          score)

           p2 (new-rating rb
                          (expected (- ra rb))
                          (invert-score score)))))

#+END_SRC

#+BEGIN_SRC clojure :tangle yes
  ;; P1 wins against same level opponent:
  (new-rankings {:p1 1500 :p2 1500} [:p1 :p2 0])
  ;; => {:p1 1484.0, :p2 1516.0}
#+END_SRC

#+BEGIN_SRC clojure :tangle yes
  ;; P1 wins against much stronger opponent:
  (new-rankings {:p1 1300 :p2 1700} [:p1 :p2 1])
  ;; => {:p1 1329.090909090909, :p2 1670.909090909091}
#+END_SRC

* Re-frame

#+BEGIN_NOTES

Another very important piece of the puzzle is Re-Frame, which is a
great little framework to create SPAs doing Functional Reactive
Programming.

In this stack we have `React` at the bottom, which is the lower level
library. On top of that there is a Clojurescript wrapper called
`Reagent`, which hides all the javascript interop and give you a nice
Clojure interface to React.

#+END_NOTES

React → (Clojurescript) → Reagent → Re-Frame

** Reagent  Syntax

#+BEGIN_NOTES

I assume probably everyone knows about React, but it was quite a big
deal for the functional programming community, since it really works
extremely with functional languages.

The idea of the virtual dom allows you to focus just on pure functions
that simply render your content, knowing that your page will be
automatically updated whenever the data changes.

Reagent is just one of the bindings react in Clojurescript, and it
allows you to write 

#+END_NOTES

*JSX*

#+BEGIN_SRC javascript :tangle no
function getGreeting(user) {
  if (user) {
    return <h1>Hello, {formatName(user)}!</h1>;
  }
  return <h1>Hello, Stranger.</h1>;
}

#+END_SRC

*REAGENT*

#+BEGIN_SRC clojure :tangle yes
  (defn get-greeting
    [user]
    (if user
      [:h1 "Hello" [format-name user]]
      [:h1 "Hello, Stranger"]))

#+END_SRC

** Reagent rendering

#+BEGIN_SRC javascript :tangle no
  const element = <h1>Hello, world</h1>;
  ReactDOM.render(element, document.getElementById('root'));
#+END_SRC

#+BEGIN_SRC clojure :tangle yes
  (def element [:h1 "Hello, world"])

  (reagent/render-component element
                            (.-getElementbyid js/document "root"))
#+END_SRC

** Re-frame primitives

# TODO: put actual base concepts here instead of the functions that
# are going to be shown

- single *app db*
- subscriptions: *reg-sub*
- event handler: *reg-event-db*
- effect handler: *reg-event-fx*

** Form

[[./form.png]]

** DB

#+BEGIN_SRC clojure

(def default-db
  {:games []
   :players []
   :dead-players #{}
   :game {}
   :error nil
   :up-to-games nil
   :league {}
   :league_id nil})

(def default-game
  {:p1 ""
   :p2 ""
   :p1_points ""
   :p2_points ""
   :p1_using ""
   :p2_using ""
   :played_at (js/moment)})

#+END_SRC

** Subscription

#+BEGIN_SRC clojure
  (rf/reg-sub ::game
              (fn [db _]
                [::game db]))

  (rf/reg-event-db ::p1_using
                   (fn [db [_ val]]
                     (assoc-in db [::game :p1_using] val)))
#+END_SRC

#+BEGIN_SRC clojure
  (let [game @(rf/subscribe [::handlers/game])]
    [:input.form-control
     {:type "text"
      :placeholder "Name"
      :value (:p1_using @game)
      :on-change (utils/set-val ::handlers/p1_using)}])
#+END_SRC

** API Call

#+BEGIN_SRC clojure
  (rf/reg-event-db
   ::on-success
   (fn [db [_ games]]
     (assoc db ::games games)))

  (rf/reg-event-fx
   ::load-games
   (fn [{:keys [db]} _]
     {:db db
      :http-xhrio {:method :get
                   :uri "/api/games"
                   :params {:league_id (get-league-id db)}
                   :format (ajax/json-request-format)
                   :response-format (ajax/json-response-format {:keywords? true})
                   :on-success [::on-success]
                   :on-failure [:failed]}}))
#+END_SRC

* Demo Time

#+BEGIN_NOTES

We are going to do a quick demo now, to show what it means to do full
stack development with Clojure and re-frame.  So we'll add a simple
new feature to our platform, simply showing some extra stats in the
player page.

To do this we'll need:

- one extra reagent component
- a re-frame subscription
- more business logic to compute the desired stats
- a bit of CSS to make it look pretty

#+END_NOTES

* Conclusions

#+BEGIN_NOTES

To conclude I just want to say that for me frontend development has
never been so fun.

So if you have any personal projects you'd like to try out
definitively give Re-frame a go, you won't regret it, careful you
might find it addictive though.

#+END_NOTES

[[./happy_dog.jpg]]

*Frontend development is fun*

* Tasks
** TODO add something about CLJC files and how easy is to share business logic across frontend and backend?
** TODO add some graph explaining how re-frame works?
** TODO think about what can be done in a small demo
** TODO improve conclusions
** TODO fix all the code
** DONE improve explanation of Elo
   CLOSED: [2018-11-22 Thu 13:14]
   - CLOSING NOTE [2018-11-22 Thu 13:14]

** DONE add link to the project and the twitter handle more clearly
   CLOSED: [2018-11-22 Thu 13:13]
   - CLOSING NOTE [2018-11-22 Thu 13:13] \\
     linked it to the meetup page
** DONE send slides sample to branding
   CLOSED: [2018-11-22 Thu 13:12]

   - CLOSING NOTE [2018-11-22 Thu 13:12]
** DONE add the sample ELO implementation code
   CLOSED: [2018-11-14 Wed 17:07]
   - CLOSING NOTE [2018-11-14 Wed 17:07]
** DONE use only copyleft pictures to avoid copyright issues
   CLOSED: [2018-11-14 Wed 17:07]
   - CLOSING NOTE [2018-11-14 Wed 17:07]


* Ideas for the demo
- change parameters of the Elo algorithm
- change slightly the Elo algorithm to take into consideration the goal difference
- add the rankings difference into the table of results
