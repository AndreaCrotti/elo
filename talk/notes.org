#+AUTHOR: Andrea Crotti (@andreacrotti)
#+TITLE: Build an ELO platform with Re-Frame
#+OPTIONS: num:nil toc:nil ^:nil tex:t reveal_progress:t reveal_control:t reveal_overview:t
#+REVEAL_TRANS: none
#+REVEAL_SPEED: fast
#+REVEAL_HLEVEL: 1
#+TOC: listings

* Who Am I

#+BEGIN_NOTES
Just to give a very brief introduction about myself, I work at Funding
Circle and I've been for most of my career a backend Developer.

To be more precise I did some CSS and JS with Angular or other
similarly horrible frameworks, but I never actually enjoyed the
experience.

In the last year however I worked on 2 medium personal projects using
Clojure and Clojurescript and I realised that with the right
technologies frontend can be a lot of fun actually.

So today I'm going to talk about one of these, a platform to create
leagues with your friends and keep track of rankings.

#+END_NOTES

#+ATTR_REVEAL: :frag (appear)
- senior software developer at Funding Circle
- API & backends for a long time
- saw the light with Clojure & Clojurescript

* Outline

#+BEGIN_NOTES

In this talk we are going to introduce the Elo algorihtm, to
understand how that's used to rank players in a league.

Then I will introduce the re-frame and reagent framework, and finally
I will use the project itself to demo the basic of re-frame.

#+END_NOTES

- the Elo algorithm
- reagent / re-frame introduction
- reagent/ re-frame demo

* Play

#+BEGIN_NOTES

Every respectable start-up out there has a few games, they are after
all a great way to bond and to take your mind off an annoying bug you
can't seem to solve.

However of course playing is even more fun if you make it competitive,
so we need a way to keep track of all the games and a way to rank the
players.

I've had internal leagues for table tennis and similar office sports
in various companies, where the tracking tool was sometimes just an
extremely complicated spreadsheet, and since there wasn't nothing here
at funding circle I just decided to build a new tool.

#+END_NOTES

[[./kittens.jpg]]

* Elo

#+BEGIN_NOTES
You might have heard of Elo in relation with Chess, where every
player, at least the good ones, have an elo score.  The name comes
from Elo Arpad, the creator of the algorithm, who originally created
this algorithm for chess players.
#+END_NOTES

[[./chess.jpg]]

** Elo rating system

#+BEGIN_NOTES

Before we look at how Elo works in more detail, these are the main
features.  Elo is used to calculate theh *relative* skill level, so
your ranking will always depend on the other players in the same
league.

It can be used for any zero sum game, here we are only currently using
it for Fifa but table tennis pool or any other office sport would work
perfectly well.

Another point to keep in mind is that whenever you play a game the new
players rankings will only depend on the current rankings *and* the
result, nothing else, which makes it extremely easy to implement.

And lastly the average of the points is always the same, which means
that the rankings will never eventually converge to 0 or infinite.
#+END_NOTES

#+ATTR_REVEAL: :frag (appear)
- method for calculating the *relative* skill levels of players
- can be applied to *any* zero sum game (chess / tennis / table tennis...)
- new rankings *only* depends on current rankings and result
- the average of all the rankings is constant

** Demo time

#+BEGIN_NOTES

Let's see in practice how this works with a very simple demo.

#+END_NOTES

** Elo example

#+BEGIN_NOTES

You can compute the new rankings of two players with simply the current rankings and the result of the game.
Everyone starts from 1500, and overall that will always be the average of all the scores in the league.

#+END_NOTES

*A: 1500, B: 1500*

$E\_A =  \frac{1}{1 + 10 ^ \frac{RB - RA}{400}} = \frac{1}{1 + 10 ^ \frac{0}{400}}$
$E\_A = \frac{1}{2} = 0.5$
$E\_B = \frac{1}{2} = 0.5$

*A vs B (3-0):*

$R\_A = 1500 + (K * (1 - E\_A)) = 1500 + (32 * (1 - 0.5)) = 1516$
$R\_B = 1500 + (K * (1 - E\_B)) = 1500 + (32 * (0 - 0.5)) = 1484$

*A = 1516, B = 1484*

* Elo implementation

** Elo implementation (1)

#+BEGIN_NOTES
The implementation is quite straight forward, these two functions
compute the expected score and the new ranking.
#+END_NOTES

$E\_A =  \frac{1}{1 + 10 ^ \frac{RB - RA}{400}}$

$R\_A = R\_A + (K * (1 - E\_A))$

#+BEGIN_SRC clojure :tangle yes
(defn expected
  [diff]
  (/ 1.0 (inc (Math/pow 10 (/ diff 400)))))

#+END_SRC

#+BEGIN_SRC clojure :tangle yes
(defn new-rating
  [old expected score]
  (+ old (* k (- score expected))))

#+END_SRC

** Elo implementation (2)

#+BEGIN_NOTES
To make it more usable though we need a way to compute new rankings
given existing rankings and a game.

So the function new-rankings takes as input a map with existing player
rankings, a game which we destructure in the arguments and returns the
new rankings.

One thing worth to mention is that these functions to compute the
rankings are all pure, they take immutable data structures in input
and return new immutable data structures.

They also work both in Clojure and Clojurescript without any changes,
and actually in the beginning they were part of Clojure files and used
by the backend API, while now they are in CLJC files and are actually
used *only* on the client side.

Immutability and the ability to run the same code both on the JVM and
in the browser opens the door to very exciting possibilities.
#+END_NOTES

#+BEGIN_SRC clojure :tangle yes

(defn new-rankings
  [rankings [p1 p2 score]]

  (let [ra (get rankings p1)
        rb (get rankings p2)]

    (assoc rankings
           p1 (new-rating ra
                          (expected (- rb ra))
                          score)

           p2 (new-rating rb
                          (expected (- ra rb))
                          (invert-score score)))))

#+END_SRC

#+BEGIN_SRC clojure :tangle yes
  ;; P1 wins against same level opponent:
  (new-rankings {:p1 1500 :p2 1500} [:p1 :p2 0])
  ;; => {:p1 1484.0, :p2 1516.0}
#+END_SRC

#+BEGIN_SRC clojure :tangle yes
  ;; P1 wins against much stronger opponent:
  (new-rankings {:p1 1300 :p2 1700} [:p1 :p2 1])
  ;; => {:p1 1329.090909090909, :p2 1670.909090909091}
#+END_SRC

* Re-frame introduction

#+BEGIN_NOTES

Another very important piece of the puzzle is Re-Frame, which is a
great little framework to create SPAs doing Functional Reactive
Programming.

From re-frame github page, re-frame is a pattern for writing SPAs in
Clojurescript using Reagent.

For what it does it's a surprisingly small library with only around
750 lines of code, and it's defined as a pattern because the really
important thing it gives you is a nice and elegant way to define the
structure of your Spa, using a single centralised DB to store all the
client side state, and a chain of event handlers to handle user
interaction with a functional reactive programming approach.

In this stack we have `React` at the bottom, which is the lower level
library. On top of that there is a Clojurescript wrapper called
`Reagent`, which hides all the javascript interop and give you a nice
Clojure interface to React.

#+END_NOTES

*re-frame is a pattern for writing SPAs in ClojureScript, using Reagent.*

#+ATTR_REVEAL: :frag (appear)
- React
- Reagent
- Re-Frame

** Reagent  Syntax

#+BEGIN_NOTES

I assume probably everyone knows about React, but it was quite a big
deal for the functional programming community, since it really works
extremely with functional languages.

The idea of the virtual dom allows you to focus just on pure functions
that simply render your content, knowing that your page will be
automatically updated whenever the data changes.

Reagent is just one of the bindings react in Clojurescript, and it
allows you to write html using Hiccup syntax, which is an very nice
way to use data structures everywhere.
#+END_NOTES

*JSX*

#+BEGIN_SRC javascript :tangle no
function getGreeting(user) {
  if (user) {
    return <h1>Hello, {formatName(user)}!</h1>;
  }
  return <h1>Hello, Stranger.</h1>;
}

#+END_SRC

*REAGENT*

#+BEGIN_SRC clojure :tangle yes
  (defn get-greeting
    [user]
    (if user
      [:h1 [str "Hello" [format-name user]]]
      [:h1 "Hello, Stranger"]))

#+END_SRC


* Re-frame in action
** Re-frame primitives

#+ATTR_REVEAL: :frag (appear)
- subscriptions: *reg-sub*
- event handler: *reg-event-db*
- effect handler: *reg-event-fx*

** Form

[[./form.png]]

** Demo time

#+BEGIN_NOTES
To give a better understanding of what the code refers to let's go
back to the app to see and look at what happens when you fill in the
form.
#+END_NOTES

** Model

#+BEGIN_SRC clojure

(def default-game
  {:p1 ""
   :p2 ""
   :p1_points ""
   :p2_points ""
   :p1_using ""
   :p2_using ""
   :played_at (js/moment)})

#+END_SRC

** Controller

#+BEGIN_SRC clojure
  (rf/reg-sub ::game
              (fn [db _]
                [::game db]))

  (rf/reg-event-db ::p1_using
                   (fn [db [_ val]]
                     (assoc-in db [::game :p1_using] val)))
#+END_SRC

** View

#+BEGIN_SRC clojure
  (let [game @(rf/subscribe [::handlers/game])]
    [:input.form-control
     {:type "text"
      :placeholder "Name"
      :value (:p1_using @game)
      :on-change (utils/set-val ::handlers/p1_using)}])
#+END_SRC

** API Call

#+BEGIN_SRC clojure
  (rf/reg-event-db
   ::on-success
   (fn [db [_ games]]
     (assoc db ::games games)))

  (rf/reg-event-fx
   ::load-games
   (fn [{:keys [db]} _]
     {:http-xhrio {:method :get
                   :uri "/api/games"
                   :params {:league_id (get-league-id db)}
                   :format (ajax/json-request-format)
                   :response-format (ajax/json-response-format {:keywords? true})
                   :on-success [::on-success]
                   :on-failure [:failed]}}))
#+END_SRC

* Conclusions

#+BEGIN_NOTES

To conclude I just want to say that for me frontend development has
never been so fun.

So if you have any personal projects you'd like to try out
definitively give Re-frame a go, you won't regret it, careful you
might find it addictive though.

#+END_NOTES

[[./happy_dog.jpg]]

*Frontend development is fun*
